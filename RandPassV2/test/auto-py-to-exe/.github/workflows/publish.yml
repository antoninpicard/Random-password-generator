name: Publish On Tag

on:
  push:
    tags:
      - 'v*'

jobs:
  initial-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Only allow tags on master to be published
        if: github.event.base_ref != 'refs/heads/master'
        run: exit 1

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests for Python ${{ matrix.python-version }} on ${{ matrix.os }}
        run: |
          pip install -e .
          pytest

  publish:
    needs: [initial-checks, test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install setuptools wheel twine

      - name: Get module version
        id: get_module_version
        shell: bash
        run: |
          version=$(python -c "from auto_py_to_exe import __version__ as v; print(v)")
          echo "Module version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Fail on tag and module version mismatch
        if: (!endsWith(github.ref, steps.get_module_version.outputs.version))
        run: |
          echo "Ref that triggered release: ${{ github.ref }}"
          echo "Current module version: ${{ steps.get_module_version.outputs.version }}"
          exit 1

      - name: Get documented version changes from CHANGELOG.md
        id: get_documented_changes
        shell: bash
        run: |
          changes="$(
            found_version=0; \
            while IFS= read -r line; do \
              if [[ $found_version == 0 ]]; then\
                if [[ $line == *"${{ steps.get_module_version.outputs.version }}"* && $line == "##"* ]]; then \
                  found_version=1; \
                fi \
              else \
              if [[ $line == "##"* ]]; then \
                found_version=0; \
              else \
                echo "$line"; \
              fi \
              fi \
            done < CHANGELOG.md
          )"

          echo "Documented changes:"
          echo "$changes"
          echo ""

          if [[ $changes == "" ]]; then \
          	echo "Changes have not been documented"; \
          	exit 1; \
          else \
          	changes="${changes//'%'/'%25'}"; \
          	changes="${changes//$'\n'/'%0A'}"; \
          	changes="${changes//$'\r'/'%0D'}"; \
          	echo "changes=$changes" >> $GITHUB_OUTPUT; \
          fi

      - name: Build distribution
        run: |
          python setup.py sdist bdist_wheel --universal

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_module_version.outputs.version }}
          name: v${{ steps.get_module_version.outputs.version }}
          draft: false
          prerelease: false
          body: ${{ steps.get_documented_changes.outputs.changes }}
          files: |
            ./dist/auto_py_to_exe-${{ steps.get_module_version.outputs.version }}-py2.py3-none-any.whl
